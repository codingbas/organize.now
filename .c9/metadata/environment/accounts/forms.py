{"filter":false,"title":"forms.py","tooltip":"/accounts/forms.py","ace":{"folds":[],"scrolltop":186,"scrollleft":0,"selection":{"start":{"row":45,"column":0},"end":{"row":45,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"299ee5b7e751f4f351e75cacecd8f879b9f617f9","undoManager":{"mark":3,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":44,"column":24},"action":"remove","lines":["from django import forms","from django.contrib.auth.models import User","from django.contrib.auth.forms import UserCreationForm","from django.core.exceptions import ValidationError","","","class UserLoginForm(forms.Form):","    \"\"\"Form to be used to log users in\"\"\"","","    username = forms.CharField()","    password = forms.CharField(widget=forms.PasswordInput)","","","class UserRegistrationForm(UserCreationForm):","    \"\"\"Form used to register a new user\"\"\"","","    password1 = forms.CharField(","        label=\"Password\",","        widget=forms.PasswordInput)","    password2 = forms.CharField(","        label=\"Password Confirmation\",","        widget=forms.PasswordInput)","    ","    class Meta:","        model = User","        fields = ['email', 'username', 'password1', 'password2']","    ","    def clean_email(self):","        email = self.cleaned_data.get('email')","        username = self.cleaned_data.get('username')","        if User.objects.filter(email=email).exclude(username=username):","            raise forms.ValidationError(u'Email address must be unique')","        return email","","    def clean_password2(self):","        password1 = self.cleaned_data.get('password1')","        password2 = self.cleaned_data.get('password2')","","        if not password1 or not password2:","            raise ValidationError(\"Please confirm your password\")","        ","        if password1 != password2:","            raise ValidationError(\"Passwords must match\")","        ","        return password2"],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":57,"column":0},"action":"insert","lines":["from django import forms","from django.contrib.auth.models import User","from django.contrib.auth.forms import UserCreationForm","from django.core.exceptions import ValidationError","from accounts.models import UserProfile","","# UserProfile form which lets users update there profile","class UserProfileForm(forms.ModelForm):","","    class Meta:","        model = UserProfile","        fields = ['description', 'picture']","        widgets = {","            'description': forms.TextInput(attrs={","                'class':'form-control',","                'placeholder': 'Please enter a profile description'","            }),","            'picture': forms.ClearableFileInput(attrs={","                'class':'btn btn-default auto-width'","            }),","        }","        ","# UserLogin form which lets users log in to the website","class UserLoginForm(forms.Form):","    username_or_email = forms.CharField(label=\"Enter a Username\")","    password = forms.CharField(widget=forms.PasswordInput, label=\"Enter a Password\")","","# UserRegistration form which lets users log in to the website","class UserRegistrationForm(UserCreationForm):","    password1 = forms.CharField(label='Password', widget=forms.PasswordInput)","    password2 = forms.CharField(","        label='Password Confirmation',","        widget=forms.PasswordInput","    )","","    class Meta:","        model = User","        fields = ['username', 'email', 'password1', 'password2']","","    def clean_email(self):","        email = self.cleaned_data.get('email')","        username = self.cleaned_data.get('username')","        if User.objects.filter(email=email).exclude(username=username):","            raise forms.ValidationError(u'Email addresses must be unique.')","        return email","","    def clean_password2(self):","        password1 = self.cleaned_data.get('password1')","        password2 = self.cleaned_data.get('password2')","","        if not password1 or not password2:","            raise ValidationError(\"Password must not be empty\")","","        if password1 != password2:","            raise ValidationError(\"Passwords do not match\")","","        return password2",""],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":57,"column":0},"action":"remove","lines":["from django import forms","from django.contrib.auth.models import User","from django.contrib.auth.forms import UserCreationForm","from django.core.exceptions import ValidationError","from accounts.models import UserProfile","","# UserProfile form which lets users update there profile","class UserProfileForm(forms.ModelForm):","","    class Meta:","        model = UserProfile","        fields = ['description', 'picture']","        widgets = {","            'description': forms.TextInput(attrs={","                'class':'form-control',","                'placeholder': 'Please enter a profile description'","            }),","            'picture': forms.ClearableFileInput(attrs={","                'class':'btn btn-default auto-width'","            }),","        }","        ","# UserLogin form which lets users log in to the website","class UserLoginForm(forms.Form):","    username_or_email = forms.CharField(label=\"Enter a Username\")","    password = forms.CharField(widget=forms.PasswordInput, label=\"Enter a Password\")","","# UserRegistration form which lets users log in to the website","class UserRegistrationForm(UserCreationForm):","    password1 = forms.CharField(label='Password', widget=forms.PasswordInput)","    password2 = forms.CharField(","        label='Password Confirmation',","        widget=forms.PasswordInput","    )","","    class Meta:","        model = User","        fields = ['username', 'email', 'password1', 'password2']","","    def clean_email(self):","        email = self.cleaned_data.get('email')","        username = self.cleaned_data.get('username')","        if User.objects.filter(email=email).exclude(username=username):","            raise forms.ValidationError(u'Email addresses must be unique.')","        return email","","    def clean_password2(self):","        password1 = self.cleaned_data.get('password1')","        password2 = self.cleaned_data.get('password2')","","        if not password1 or not password2:","            raise ValidationError(\"Password must not be empty\")","","        if password1 != password2:","            raise ValidationError(\"Passwords do not match\")","","        return password2",""],"id":4}],[{"start":{"row":0,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["from django import forms","from django.contrib.auth.models import User","from django.contrib.auth.forms import UserCreationForm","from django.core.exceptions import ValidationError","","","class UserLoginForm(forms.Form):","    \"\"\"Form to be used to log users in\"\"\"","","    username = forms.CharField()","    password = forms.CharField(widget=forms.PasswordInput)","","","class UserRegistrationForm(UserCreationForm):","    \"\"\"Form used to register a new user\"\"\"","","    password1 = forms.CharField(","        label=\"Password\",","        widget=forms.PasswordInput)","    password2 = forms.CharField(","        label=\"Password Confirmation\",","        widget=forms.PasswordInput)","    ","    class Meta:","        model = User","        fields = ['email', 'username', 'password1', 'password2']","    ","    def clean_email(self):","        email = self.cleaned_data.get('email')","        username = self.cleaned_data.get('username')","        if User.objects.filter(email=email).exclude(username=username):","            raise forms.ValidationError(u'Email address must be unique')","        return email","","    def clean_password2(self):","        password1 = self.cleaned_data.get('password1')","        password2 = self.cleaned_data.get('password2')","","        if not password1 or not password2:","            raise ValidationError(\"Please confirm your password\")","        ","        if password1 != password2:","            raise ValidationError(\"Passwords must match\")","        ","        return password2",""],"id":5}]]},"timestamp":1566492380847}